---
- name: Catalog web stack
  hosts: catalog-web,catalog-next-web
  serial: "{{ datagov_serial | default(1) }}"
  vars:
      app_type: catalog

  roles:
    - role: software/common/tls
      tags:
        - tls
    - role: software/ckan/common
    - role: gsa.datagov-deploy-apache2
      apache2_enabled: "{{ datagov_in_service | default(true) }}"
      tags:
        - apache
    - role: software/ckan/catalog/ckan-app
      vars:
        app_repo_branch: "{{ catalog_ckan_app_version }}"
      tags:
        - app-deploy
    - role: pgolm.monit
      vars:
        monit_cycle: "{{ monit_cycle_seconds | default(60) }}"
        monit_log_destination: /var/log/ckan/monit.log
        monit_webinterface_enabled: false
        monit_mail_enabled: true
        monit_alert_addresses:
          - "{{ datagov_team_email }} only on { resource, timeout }"
        monit_alert_mail_format:
          from: "{{ default_email_from }}"
          subject: $SERVICE $EVENT at $DATE
          message: |
            Monit $ACTION $SERVICE at $DATE on $HOST: $DESCRIPTION.

            Details at New Relic page: https://one.newrelic.com/launcher/infra.infra

            * Note: apache2 memory usage is checked against threshold {{ monit_apache2_mem_threshold }}%.
              You are receiving notifications for the following events:
              1) "Resource limit matched" in subject line means apache2 is being restarted after memory reaching threshold.
              2) "Resource limit succeeded" in subject line means apache2 is back to normal after restart.
              3) "Timeout" means monit has given up monitoring apache2 after too many failed attempts.
                 Run "sudo rm /var/lib/monit/state && sudo monit reload" to recover it.
        monit_services:
          - name: catalog-web-apache2
            type: process
            target: /var/run/apache2/apache2.pid
            start: "/etc/init.d/apache2 start"
            stop: "/etc/init.d/apache2 stop"
            rules:
              - if TOTALMEMORY > {{ monit_apache2_mem_threshold }}% for {{ monit_apache2_mem_cycle | default(4) }} cycles then restart
              - if 5 restarts within 20 cycles then unmonitor
      tags:
        - monit

  # Host-level smoke tests
  tasks:
    - name: flush handlers
      meta: flush_handlers

    - name: assert catalog is up
      uri:
        url: https://{{ ansible_fqdn }}/api/action/status_show
        follow_redirects: none
        status_code: 200
        # TODO enable cert validation. Staging and production hosts have GSA
        # signed certs which should be valid.
        # https://github.com/GSA/datagov-deploy/issues/900
        validate_certs: false
        headers:
          # For catalog-admin hosts
          Cookie: auth_tkt=1
      retries: 3
      delay: 10
      register: result
      until: not result.failed
      when: datagov_in_service | default(true)
      tags:
        - smoke

    - name: check /_tracking first redirection
      block:
        - name: send POST
          uri:
            url: "https://{{ ansible_fqdn }}/_tracking"
            method: POST
            status_code: 307
            follow_redirects: none
            return_content: true
            validate_certs: false
          register: response
          retries: 3
          delay: 10
          until: not response.failed
        - name: assert Location redirect
          assert:
            that: response.location == "{{ url_writable }}/_tracking"
            fail_msg: |
              POST redirect failed (we expect 307 redirection to the writable instance)
              {{ response.content }}
      become: false
      run_once: true
      tags:
        - smoke
      when:
        - catalog_ckan_readwrite_configuration == 'readonly'
        - datagov_in_service | default(true)

    - name: check /_tracking redirection with data
      block:
        - name: send POST with data
          uri:
            url: "https://{{ ansible_fqdn }}/_tracking"
            method: POST
            body: "url=/ansible-test&type=page"
            status_code: 200
            follow_redirects: yes
            return_content: true
            validate_certs: false
          register: response
          retries: 3
          delay: 10
          until: not response.failed
        - name: assert Location redirect
          assert:
            that: response.url == "{{ url_writable }}/_tracking"
            fail_msg: |
              POST redirect failed (we expect redirection to the writable instance)
              {{ response.content }}
      become: false
      run_once: true
      tags:
        - smoke
      when:
        - catalog_ckan_readwrite_configuration == 'readonly'
        - datagov_in_service | default(true)


- name: logrotate configuration
  hosts: catalog-web,catalog-next-web
  roles:
    - role: nickhammond.logrotate
      logrotate_scripts:
        - name: inventory
          paths:
            - /var/log/ckan/ckan.error.log
            - /var/log/ckan/ckan.access.log
          options:
            - compress
            - copytruncate
            - daily
            - missingok
            - rotate 180

- name: Service-level admin-catalog.data.gov smoke tests (catalog classic)
  hosts: catalog-admin
  tags:
    - smoke
  tasks:
    - name: flush handlers
      meta: flush_handlers

    - name: assert catalog is up
      uri:
        url: "{{ catalog_ckan_admin_service_url }}/api/action/status_show"
        follow_redirects: none
        status_code: 200
        headers:
          Cookie: auth_tkt=1
        # TODO enable cert validation. Staging and production hosts have GSA
        # signed certs which should be valid.
        # https://github.com/GSA/datagov-deploy/issues/900
        validate_certs: false
      run_once: true
      delegate_to: localhost
      become: false
      retries: 3
      delay: 10
      register: result
      until: not result.failed

- name: Service-level catalog-next.data.gov smoke tests (catalog-next)
  hosts: catalog-next-web
  tags:
    - smoke
  tasks:
    - name: flush handlers
      meta: flush_handlers

    - name: assert catalog is up
      uri:
        url: "{{ catalog_ckan_service_url }}/api/action/status_show"
        follow_redirects: none
        status_code: 200
        # TODO enable cert validation. Staging and production hosts have GSA
        # signed certs which should be valid.
        # https://github.com/GSA/datagov-deploy/issues/900
        validate_certs: false
      run_once: true
      delegate_to: localhost
      become: false
      retries: 3
      delay: 10
      register: result
      until: not result.failed
      when: datagov_in_service | default(true)

    - name: no Server info disclosed in response headers
      # gunicorn prior to version 20.1.0 adds "server" header.
      # Nginx/Apache adds "Server".
      fail:
        msg : >
          Server info disclosed as
          {{ result.server if result.server is defined else result.Server }}
      when: >
        ( result.server is defined and result.server | length > 0 )
        or
        ( result.Server is defined and result.Server | length > 0 )

- name: Service-level admin-catalog-next.data.gov smoke tests (catalog-next)
  hosts: catalog-next-web-admin
  tags:
    - smoke
  tasks:
    - name: flush handlers
      meta: flush_handlers

    - name: assert catalog is up
      uri:
        url: "{{ catalog_ckan_admin_service_url }}/api/action/status_show"
        follow_redirects: none
        status_code: 200
        headers:
          Cookie: auth_tkt=1
        # TODO enable cert validation. Staging and production hosts have GSA
        # signed certs which should be valid.
        # https://github.com/GSA/datagov-deploy/issues/900
        validate_certs: false
      run_once: true
      delegate_to: localhost
      become: false
      retries: 3
      delay: 10
      register: result
      until: not result.failed
      when: datagov_in_service | default(true)

    - name: no Server info disclosed in response headers
      # gunicorn prior to version 20.1.0 adds "server" header.
      # Nginx/Apache adds "Server".
      fail:
        msg : >
          Server info disclosed as
          {{ result.server if result.server is defined else result.Server }}
      when: >
        ( result.server is defined and result.server | length > 0 )
        or
        ( result.Server is defined and result.Server | length > 0 )
